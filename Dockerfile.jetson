# syntax=docker/dockerfile:1.3
FROM nvidia/cuda-arm64:11.1.1-cudnn8-devel-ubuntu18.04
LABEL maintainer ana.milas@fer.hr

# Set environment variables
ARG CATKIN_WORKSPACE=uav_ws
ARG ROS_DISTRO=melodic
ARG HOME=/root

ARG TENSORRT_VERSION=8.5.2
# tensorrt tar file url
ARG TENSORRT_URL=https://drive.google.com/file/d/1Etdy6POcwD81LRz9CLqhLLH9lSQmUWFZ/view?usp=sharing

# Avoid Public GPG key error
# https://github.com/NVIDIA/nvidia-docker/issues/1631
RUN rm /etc/apt/sources.list.d/cuda.list \
    && rm /etc/apt/sources.list.d/nvidia-ml.list \
    && apt-key del 7fa2af80 \
    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub \
    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub

# (Optional, use Mirror to speed up downloads)
# RUN sed -i 's/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.aliyun.com\/ubuntu\//g' /etc/apt/sources.list && \
#    pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

# Install system dependencies
# Install all the things to stop docker build from breaking
RUN ln -fs /usr/share/zoneinfo/Europe/Zagreb /etc/localtime && \
    apt-get update && apt-get install -q -y \
    git \
    sudo \
    lsb-release \
    gnupg2 \
    apt-utils \
    dialog \
    curl \
    ca-certificates \
    bzip2 \
    libx11-6 \
    tzdata && \
    python3-pip \
    python3-dev \
    python3-opencv \
    dpkg-reconfigure --frontend noninteractive tzdata

# Upgrade pip
RUN python3 -m pip install --upgrade pip
# Install PyTorch and torchvision
RUN pip3 install torch torchvision torchaudio -f https://download.pytorch.org/whl/cu111/torch_stable.html
# Install ROS
RUN curl https://raw.githubusercontent.com/larics/uav_ros_stack/main/installation/dependencies/ros.sh | bash
# Install General ROS things
RUN curl https://raw.githubusercontent.com/larics/uav_ros_stack/main/installation/dependencies/general.sh | bash

# Install Realsense specific dependencies
RUN apt-get update && \
    apt-get install -y \
        openssh-server \
        libmysqlclient-dev \
        ros-$ROS_DISTRO-realsense2-camera \
        ros-$ROS_DISTRO-rgbd-launch \
        ros-$ROS_DISTRO-realsense2-description \
        libglew-dev \
        libglfw3 \
        libglfw3-dev \
        software-properties-common \
        libnvidia-gl-440 \
        nano \
        tmux \
        git-gui

# Set realsense rules
RUN curl https://raw.githubusercontent.com/IntelRealSense/librealsense/master/config/99-realsense-libusb.rules >> /etc/udev/rules.d/99-realsense-libusb.rules

# Agent forwarding during docker build https://stackoverflow.com/questions/43418188/ssh-agent-forwarding-during-docker-build
# install ssh client and git
RUN apt-get install openssh-client git

# Download public key for github.com
RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts

# Install workspace
RUN curl https://raw.githubusercontent.com/larics/uav_ros_stack/main/installation/workspace_setup.sh | bash -s $CATKIN_WORKSPACE

ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 7.5 8.0 8.6+PTX" \
    TORCH_NVCC_FLAGS="-Xfatbin -compress-all" \
    CMAKE_PREFIX_PATH="$(dirname $(which conda))/../" \
    FORCE_CUDA="1"

# Install the required packages
RUN apt-get update \
    && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install MMEngine and MMCV
RUN pip install openmim && \
    mim install "mmengine>=0.7.1" "mmcv>=2.0.0rc4"

# Install MMDetection
WORKDIR $HOME/
RUN conda clean --all
RUN --mount=type=ssh git clone git@github.com:AnaBatinovic/mmdetection.git \
    && cd $HOME/mmdetection \
    && pip install --no-cache-dir -e .

# Install sdk
RUN apt-get install libopencv-dev
RUN cd 
RUN git clone https://github.com/openppl-public/ppl.cv.git \
    && cd ppl.cv \
    && export PPLCV_DIR=$(pwd) \
    && git checkout tags/v0.7.0 -b v0.7.0 \
    && ./build.sh cuda

# Install tensorrt
RUN wget -c $TENSORRT_URL && \
    tar -zxvf $HOME/TensorRT-${TENSORRT_VERSION}*.tar.gz -C $HOME &&\
    rm -rf TensorRT-${TENSORRT_VERSION}*.tar.gz &&\
    ln -sf $HOME/TensorRT-${TENSORRT_VERSION} $HOME/TensorRT &&\
    cd $HOME/TensorRT && rm -rf data doc samples uff &&\
    export PY_VERSION=$(python3 -V | awk '{print $2}' | awk '{split($0, a, "."); print a[1]a[2]}') &&\
    python3 -m pip install ./python/tensorrt-*-cp${PY_VERSION}-none-linux_x86_64.whl

ENV CUDNN_DIR=/usr/local/cuda/lib64
ENV TENSORRT_DIR=$HOME/TensorRT
ENV LD_LIBRARY_PATH=$TENSORRT_DIR/lib:$LD_LIBRARY_PATH
ENV PATH=$TENSORRT_DIR/bin:$PATH

# # Inference Engines for MMDeploy
# RUN apt-get update
# RUN apt-get install -y \
#     libnvinfer8=${TENSORRT_VERSION-1+cuda11.1.1}.* \
#     libnvinfer-plugin8=${TENSORRT_VERSION-1+cuda11.1.1}.* \
#     libnvinfer-dev=${TENSORRT_VERSION-1+cuda11.1.1}.* \
#     libnvinfer-plugin-dev=${TENSORRT_VERSION-1+cuda11.1.1}.* \
#     libnvonnxparsers8=${TENSORRT_VERSION-1+cuda11.1.1}.* \
#     libnvonnxparsers-dev=${TENSORRT_VERSION-1+cuda11.1.1}.* \
#     libnvparsers8=${TENSORRT_VERSION-1+cuda11.1.1}.*  \
#     libnvparsers-dev=${TENSORRT_VERSION-1+cuda11.1.1}.*

# RUN sudo apt-get install tensorrt-dev=${TENSORRT_VERSION-1+cuda11.1.1}

# Install MMDeploy
WORKDIR $HOME/
RUN --mount=type=ssh git clone git@github.com:open-mmlab/mmdeploy.git &&\
    cd mmdeploy &&\
    export MMDEPLOY_DIR=$(pwd) &&\
    if [ -z ${VERSION} ] ; then echo "No MMDeploy version passed in, building on main" ; else git checkout tags/v${VERSION} -b tag_v${VERSION} ; fi &&\
    git submodule update --init --recursive &&\
    mkdir -p build &&\
    cd build
RUN cmake ..\ 
    -DCMAKE_CXX_COMPILER=g++-7 \
    -DMMDEPLOY_BUILD_SDK=ON \
    -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON \
    -DMMDEPLOY_BUILD_EXAMPLES=ON \
    -Dpplcv_DIR=${PPLCV_DIR}/cuda-build/install/lib/cmake/ppl \
    -DMMDEPLOY_TARGET_BACKENDS=trt \
    -DMMDEPLOY_TARGET_DEVICES="cuda;cpu" \
    -DTENSORRT_DIR=${TENSORRT_DIR} \
    -DCUDNN_DIR=${CUDNN_DIR} \
    && make -j$(nproc) && make install &&\
    export SPDLOG_LEVEL=warn &&\
    if [ -z ${VERSION} ] ; then echo "Built MMDeploy for GPU devices successfully!" ; else echo "Built MMDeploy version v${VERSION} for GPU devices successfully!" ; fi

# Clone and build other packages
WORKDIR $HOME/$CATKIN_WORKSPACE/src
RUN --mount=type=ssh git clone git@github.com:AnaBatinovic/mmros_wrapper.git
RUN bash -c "catkin build"